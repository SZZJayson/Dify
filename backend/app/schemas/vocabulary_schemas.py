# backend/app/schemas/vocabulary_schemas.py
from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
import enum # Python's standard enum library

# --- Enums for Learning Status (mirroring db/models.py WordLearningStatus) ---
# This enum is used by Pydantic for request/response validation and serialization.
class WordLearningStatusEnum(str, enum.Enum):
    UNKNOWN = "unknown"     # 新词或未标记
    VAGUE = "vague"       # 模糊
    KNOWN = "known"       # 认识
    MASTERED = "mastered"   # 已掌握 (可选，更高级别的掌握)

# --- Dify Word Structure (as expected from Dify or to be sent to frontend) ---
# This defines the structure of a single word object when generated by Dify
# or when sent to the frontend for display.
class DifyWordExampleSchema(BaseModel):
    example_en: Optional[str] = None # English example sentence
    en: Optional[str] = None         # Alternative key for English example
    example_cn: Optional[str] = None # Chinese translation of the example
    cn: Optional[str] = None         # Alternative key for Chinese translation
    # audio_url: Optional[str] = None # URL for example sentence audio (if available)

class DifyWordSchema(BaseModel):
    word: str                       # The word itself
    id: Optional[str | int] = None  # Optional ID (Dify might not provide, or you generate one)
    phonetic_us: Optional[str] = None # US phonetic spelling
    phonetic_uk: Optional[str] = None # UK phonetic spelling
    part_of_speech: Optional[str] = None # e.g., "n.", "v.", "adj."
    definition_cn: Optional[str] = None  # Primary Chinese definition(s)
    definitions: Optional[List[str]] = None # Alternative: list of definitions
    examples: Optional[List[DifyWordExampleSchema]] = None # List of example sentences
    image_url: Optional[str] = None    # URL for an illustrative image (if available)
    # Add any other fields your Dify workflow returns for a word

    class Config:
        from_attributes = True # If you ever create this from an ORM object directly

# --- Schemas for User's Word Learning Progress ---

# Base schema for user word progress, containing core updatable fields
class UserWordProgressBase(BaseModel):
    word: str = Field(..., min_length=1, description="学习的单词本身")
    status: WordLearningStatusEnum = Field(..., description="单词的学习状态")

# Schema for creating a new user word progress record (might not be directly used if updates handle creation)
class UserWordProgressCreate(UserWordProgressBase):
    # dify_word_data_json: Optional[str] = None # If you store the raw Dify JSON for the word
    pass

# Schema for receiving word progress updates from the frontend
class WordProgressUpdateRequest(UserWordProgressBase):
    # Inherits 'word' and 'status'
    # session_id: Optional[str] = None # Optional: if you track learning sessions
    pass

# Schema for bulk updating word progress
class BulkWordProgressUpdateRequest(BaseModel):
    progress_updates: List[WordProgressUpdateRequest] = Field(..., description="要批量更新的单词进度列表")

# Schema for API responses representing a user's word learning record
class UserWordResponse(UserWordProgressBase): # Extends UserWordProgressBase
    id: int                             # Database ID of the record
    user_id: int                        # ID of the user
    incorrect_attempts: int = 0
    correct_attempts_streak: int = 0
    last_reviewed_at: Optional[datetime] = None
    next_review_at: Optional[datetime] = None # Calculated by backend for spaced repetition
    created_at: datetime
    updated_at: Optional[datetime] = None
    # dify_word_data_json: Optional[str] = None # If you retrieve this

    class Config:
        from_attributes = True # To allow creating from SQLAlchemy model instance

# Schema for the vocabulary generation API response (if just returning Dify words)
# The /dify/generate-vocabulary endpoint already returns a list of DifyWordSchema-like objects
# so this might not be strictly needed if that endpoint's response is { "words": List[DifyWordSchema] }
class GeneratedVocabularyResponse(BaseModel):
    words: List[DifyWordSchema]
    message: str = "单词列表生成成功。"

# Schema for the vocabulary summary API response
class VocabularySummaryResponse(BaseModel):
    total_learned: int = 0
    unknown_count: int = Field(0, alias=WordLearningStatusEnum.UNKNOWN.value)
    vague_count: int = Field(0, alias=WordLearningStatusEnum.VAGUE.value)
    known_count: int = Field(0, alias=WordLearningStatusEnum.KNOWN.value)
    mastered_count: int = Field(0, alias=WordLearningStatusEnum.MASTERED.value)

    class Config:
        populate_by_name = True # Allows using enum values as field names in the input dict for aliases